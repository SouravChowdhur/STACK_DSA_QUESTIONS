Given an array arr[ ] of size N having elements, the task is to find the next greater element for each element of the array in order of their appearance in the array.
Next greater element of an element in the array is the nearest element on the right which is greater than the current element.
If there does not exist next greater of current element, then next greater element for current element is -1. For example, next greater of the last element is always -1.


Algorithm
1. Create a stack.
2. Craete a result array with n size and -1 in every pocket.
3. Move from right to left.
4. Find next largest element by using stack.
5. At last update the stack.



class Solution
{
    public:
    //Function to find the next greater element for each element of the array.
    vector<long long> nextLargerElement(vector<long long> arr, int n){
        // Your code here
        stack<long long> myStack;
        vector<long long> result(n, -1);

        for (int i = n-1; i >= 0; i--)
        {
            while (!myStack.empty() && myStack.top() <= arr[i])
            {
                myStack.pop();
            }
            
            if (myStack.empty())
            {
                result[i] = -1;
            }
            else
            {
                result[i] = myStack.top();
            }
            
            myStack.push(arr[i]);
        }
        
        return result;
    }
