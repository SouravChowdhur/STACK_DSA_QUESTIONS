Given a string S consisting of only opening and closing curly brackets '{' and '}', find out the minimum number of reversals required to convert the string into a balanced expression.
A reversal means changing '{' to '}' or vice-versa.


Algorithm
1. Valid parenthesis Logic.
2. If the stack is not empty, pop 2 char from the stack and if they are equal increase count by 1 and if they are not equal increase count by 2.
3. return count value.


int countRev (string s)
{
    // your code here
    if(s.length()%2 != 0){
        return -1;
    }
    stack<char> st;
    int count = 0;
    for(int i=0; i<s.length(); i++){
        char ch = s[i];
        if(ch == '{'){
            st.push(ch);
        }
        else{
            if(!st.empty()){
                if(st.top() == '{' && ch == '}'){
                    st.pop();
                }
                else{
                    st.push(ch);
                }
            }
            else{
                st.push(ch);
            }
        }
    }
    while(!st.empty()){
        char a = st.top(); st.pop();
        char b = st.top(); st.pop();
        if(a == b){
            count = count + 1;
        }
        else{
            count = count + 2;
        }
    }
    return count;
    
}
